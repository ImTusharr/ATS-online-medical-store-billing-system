/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2023-05-02 09:46:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class order_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");

  // Retrieve order information from the form
       String url = "jdbc:mysql://u95bkzftvx8tpees:XQG18W1E6DvpJgMSS77Y@bpgcz0m5wxumvwiokehb-mysql.services.clever-cloud.com:3306/bpgcz0m5wxumvwiokehb";
  String[] productIds = request.getParameterValues("productId");
  String name = request.getParameter("name");
  String email = request.getParameter("email");
  String phone = request.getParameter("phone");
  String customerId = request.getParameter("customerId");

  // Calculate the total cost of the order
  double totalCost = 0;
  for (int i = 0; i < productIds.length; i++) {
    String productId = productIds[i];
    int quantity = Integer.parseInt(request.getParameter("quantity"));
    Connection conn = DriverManager.getConnection(url);
    PreparedStatement stmt = conn.prepareStatement("SELECT selling_Price FROM products WHERE proid = ?");
    stmt.setString(1, productId);
    ResultSet rs = stmt.executeQuery();
    if (rs.next()) {
      double price = rs.getDouble("selling_Price");
      totalCost += price * quantity;
    }
    rs.close();
    stmt.close();
    conn.close();
  }

  // Save the order information to the database
  Connection conn = DriverManager.getConnection(url);
  try {
    // Make sure customer ID is not empty or null
    if (customerId == null || customerId.isEmpty()) {
      throw new SQLException("Customer ID cannot be empty");
    }

    // Check that the customer ID exists in the customers table
    PreparedStatement customerStmt = conn.prepareStatement("SELECT id FROM customers WHERE id = ?");
    customerStmt.setString(1, customerId);
    ResultSet customerRs = customerStmt.executeQuery();
    if (!customerRs.next()) {
      throw new SQLException("Customer ID does not exist");
    }

    PreparedStatement stmt = conn.prepareStatement("INSERT INTO orders (customer_id, total_cost) VALUES (?, ?)", Statement.RETURN_GENERATED_KEYS);
    stmt.setString(1, customerId);
    stmt.setDouble(2, totalCost);
    stmt.executeUpdate();

    ResultSet generatedKeys = stmt.getGeneratedKeys();
    if (generatedKeys.next()) {
      int orderId = generatedKeys.getInt(1);
      for (int i = 0; i < productIds.length; i++) {
        String productId = productIds[i];
        int quantity = Integer.parseInt(request.getParameter("quantity"));
        PreparedStatement stmt2 = conn.prepareStatement("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)");
        stmt2.setInt(1, orderId);
        stmt2.setString(2, productId);
        stmt2.setInt(3, quantity);
        stmt2.executeUpdate();
        stmt2.close();
      }
    }
    stmt.close();
    customerRs.close();
    customerStmt.close();
  } catch (SQLException e) {
    e.printStackTrace();
  } finally {
    conn.close();
  }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write("    body {\r\n");
      out.write("      font-family: Arial, sans-serif;\r\n");
      out.write("      font-size: 16px;\r\n");
      out.write("      line-height: 1.5;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    h2 {\r\n");
      out.write("      font-size: 24px;\r\n");
      out.write("      margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    ul {\r\n");
      out.write("      list-style: none;\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      padding: 0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    li {\r\n");
      out.write("      margin-bottom: 10px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    li::before {\r\n");
      out.write("      content: \"\\2022\";\r\n");
      out.write("      color: #ff6600;\r\n");
      out.write("      font-size: 20px;\r\n");
      out.write("      display: inline-block;\r\n");
      out.write("      width: 1em;\r\n");
      out.write("      margin-left: -1em;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    p {\r\n");
      out.write("      margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("  <title>Order Confirmation</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <h2>Order Confirmation</h2>\r\n");
      out.write("  <p>Thank you for your order! Your total cost has been calculated to be $");
      out.print( totalCost );
      out.write(".Rs</p>\r\n");
      out.write("\r\n");
      out.write("  <p>Your order will be shipped to:</p>\r\n");
      out.write("  <ul>\r\n");
      out.write("    <li>NAME IS:");
      out.print( name );
      out.write("</li>\r\n");
      out.write("    <li>EMAIL IS: ");
      out.print( email );
      out.write("</li>\r\n");
      out.write("    <li>PHONE NO IS:");
      out.print( phone );
      out.write("</li>\r\n");
      out.write("  </ul>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
